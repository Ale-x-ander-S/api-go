basePath: /api/v1
definitions:
  models.CartItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  models.CartItemResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/models.ProductResponse'
      product_id:
        type: integer
      quantity:
        type: integer
      total:
        type: number
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.CartItemUpdateRequest:
    properties:
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  models.CartResponse:
    properties:
      item_count:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.CartItemResponse'
        type: array
      total_items:
        type: integer
      total_price:
        type: number
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.OrderCreateRequest:
    properties:
      billing_address:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItemRequest'
        minItems: 1
        type: array
      notes:
        type: string
      payment_method:
        type: string
      shipping_address:
        type: string
    required:
    - billing_address
    - items
    - payment_method
    - shipping_address
    type: object
  models.OrderItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  models.OrderItemResponse:
    properties:
      discount:
        type: number
      id:
        type: integer
      order_id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/models.ProductResponse'
      product_id:
        type: integer
      quantity:
        type: integer
      total:
        type: number
    type: object
  models.OrderListResponse:
    properties:
      limit:
        type: integer
      orders:
        items:
          $ref: '#/definitions/models.OrderResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  models.OrderResponse:
    properties:
      billing_address:
        type: string
      created_at:
        type: string
      discount_amount:
        type: number
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.OrderItemResponse'
        type: array
      notes:
        type: string
      payment_method:
        type: string
      payment_status:
        type: string
      shipping_address:
        type: string
      status:
        $ref: '#/definitions/models.OrderStatus'
      tax_amount:
        type: number
      total_amount:
        type: number
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.OrderStatus:
    enum:
    - pending
    - confirmed
    - processing
    - shipped
    - delivered
    - cancelled
    - refunded
    type: string
    x-enum-comments:
      OrderStatusCancelled: Отменен
      OrderStatusConfirmed: Подтвержден
      OrderStatusDelivered: Доставлен
      OrderStatusPending: Ожидает подтверждения
      OrderStatusProcessing: В обработке
      OrderStatusRefunded: Возвращен
      OrderStatusShipped: Отправлен
    x-enum-descriptions:
    - Ожидает подтверждения
    - Подтвержден
    - В обработке
    - Отправлен
    - Доставлен
    - Отменен
    - Возвращен
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusProcessing
    - OrderStatusShipped
    - OrderStatusDelivered
    - OrderStatusCancelled
    - OrderStatusRefunded
  models.OrderUpdateRequest:
    properties:
      billing_address:
        type: string
      notes:
        type: string
      payment_status:
        type: string
      shipping_address:
        type: string
      status:
        $ref: '#/definitions/models.OrderStatus'
    type: object
  models.ProductCreateRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      dimensions:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      is_featured:
        type: boolean
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      sort_order:
        type: integer
      stock:
        minimum: 0
        type: integer
      weight:
        type: number
    required:
    - name
    - price
    type: object
  models.ProductListResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      products:
        items:
          $ref: '#/definitions/models.ProductResponse'
        type: array
      total:
        type: integer
    type: object
  models.ProductResponse:
    properties:
      category_id:
        type: integer
      category_slug:
        type: string
      created_at:
        type: string
      description:
        type: string
      dimensions:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_active:
        type: boolean
      is_featured:
        type: boolean
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      sort_order:
        type: integer
      stock:
        type: integer
      updated_at:
        type: string
      weight:
        type: number
    type: object
  models.ProductUpdateRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      dimensions:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      is_featured:
        type: boolean
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      sort_order:
        type: integer
      stock:
        minimum: 0
        type: integer
      weight:
        type: number
    type: object
  models.UserCreateRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: 45.12.229.112:8080
info:
  contact: {}
  description: REST API для управления продуктами с Redis кэшированием
  title: Products API
  version: "1.0"
paths:
  /api/v1/cart:
    get:
      description: Возвращает содержимое корзины аутентифицированного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CartResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение корзины
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Добавляет товар в корзину аутентифицированного пользователя
      parameters:
      - description: Данные товара
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.CartItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CartItemResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Добавление товара в корзину
      tags:
      - cart
  /api/v1/cart/{id}:
    delete:
      description: Удаляет товар из корзины пользователя
      parameters:
      - description: ID товара в корзине
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление товара из корзины
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Обновляет количество товара в корзине
      parameters:
      - description: ID товара в корзине
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.CartItemUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CartItemResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновление товара в корзине
      tags:
      - cart
  /api/v1/cart/clear:
    post:
      description: Удаляет все товары из корзины пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Очистка корзины
      tags:
      - cart
  /api/v1/orders:
    get:
      description: Возвращает список заказов для аутентифицированного пользователя
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        name: limit
        type: integer
      - description: Статус заказа
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderListResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Список заказов пользователя
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Создает новый заказ для аутентифицированного пользователя
      parameters:
      - description: Данные заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.OrderCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание заказа
      tags:
      - orders
  /api/v1/orders/{id}:
    get:
      description: Возвращает информацию о заказе по его ID
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение заказа по ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Обновляет информацию о заказе (только для админов)
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.OrderUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновление заказа
      tags:
      - orders
  /api/v1/orders/{id}/cancel:
    post:
      description: Отменяет заказ (только для владельца заказа)
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отмена заказа
      tags:
      - orders
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT токен
      parameters:
      - description: Данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Вход пользователя
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация пользователя
      tags:
      - auth
  /cache/invalidate:
    post:
      description: Инвалидирует весь кэш продуктов (требует аутентификации)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Инвалидация кэша
      tags:
      - cache
  /cache/stats:
    get:
      description: Возвращает статистику использования Redis кэша
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Статистика кэша
      tags:
      - cache
  /products:
    get:
      description: Возвращает список продуктов с пагинацией и фильтрацией
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        name: limit
        type: integer
      - description: Фильтр по ID категории
        in: query
        name: category_id
        type: string
      - description: Поиск по названию
        in: query
        name: search
        type: string
      - description: Минимальная цена
        in: query
        name: min_price
        type: number
      - description: Максимальная цена
        in: query
        name: max_price
        type: number
      - default: created_at
        description: Сортировка (name, price, created_at)
        in: query
        name: sort
        type: string
      - default: desc
        description: Порядок сортировки (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductListResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Список продуктов
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Создает новый продукт (требует роль admin)
      parameters:
      - description: Данные продукта
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание продукта
      tags:
      - products
  /products/{id}:
    delete:
      description: Удаляет продукт из системы (требует роль admin)
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление продукта
      tags:
      - products
    get:
      description: Возвращает информацию о продукте по его ID
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение продукта по ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Обновляет информацию о продукте (требует роль admin)
      parameters:
      - description: ID продукта
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновление продукта
      tags:
      - products
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Введите JWT токен в формате: Bearer <your-token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Операции аутентификации
  name: auth
- description: Операции с продуктами
  name: products
- description: Операции с кэшем
  name: cache
