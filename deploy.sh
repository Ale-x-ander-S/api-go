#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Products API
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [dev|staging|prod]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏–π
ENVIRONMENT=${1:-dev}
VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-$(date +%Y%m%d-%H%M%S)")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
case $ENVIRONMENT in
    dev|development)
        ENVIRONMENT="dev"
        DOCKER_COMPOSE_FILE="docker-compose.yml"
        CONFIG_FILE="config.dev.env"
        ;;
    staging)
        ENVIRONMENT="staging"
        DOCKER_COMPOSE_FILE="docker-compose.staging.yml"
        CONFIG_FILE="config.staging.env"
        ;;
    prod|production)
        ENVIRONMENT="production"
        DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
        CONFIG_FILE="config.prod.env"
        ;;
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [dev|staging|prod]"
        exit 1
        ;;
esac

log_info "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Products API"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–í–µ—Ä—Å–∏—è: $VERSION"
log_info "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE"
echo ""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local missing_deps=()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        missing_deps+=("docker-compose")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Go
    if ! command -v go &> /dev/null; then
        missing_deps+=("go")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq
    if ! command -v jq &> /dev/null; then
        missing_deps+=("jq")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [ ! -f "$CONFIG_FILE" ]; then
        log_warning "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $CONFIG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if [ "$ENVIRONMENT" = "dev" ]; then
            log_info "–°–æ–∑–¥–∞–Ω–∏–µ dev –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
            cp config.env.example "$CONFIG_FILE" 2>/dev/null || {
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
                exit 1
            }
        else
            log_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $CONFIG_FILE –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è $ENVIRONMENT"
            exit 1
        fi
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application() {
    log_info "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
    make clean
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    make deps
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    make swagger-auto
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    make build
    
    log_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞
build_docker_image() {
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º –≤–µ—Ä—Å–∏–∏
    docker build -t products-api:$VERSION .
    docker tag products-api:$VERSION products-api:latest
    
    log_success "Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: products-api:$VERSION"
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Docker Compose
deploy_docker_compose() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Docker Compose..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if [ -f "$DOCKER_COMPOSE_FILE" ]; then
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" down
    fi
    
    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f "$DOCKER_COMPOSE_FILE" up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if docker-compose -f "$DOCKER_COMPOSE_FILE" ps | grep -q "Up"; then
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        docker-compose -f "$DOCKER_COMPOSE_FILE" logs
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
deploy_local() {
    log_info "–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
    if lsof -i :8080 > /dev/null 2>&1; then
        log_warning "–ü–æ—Ä—Ç 8080 —É–∂–µ –∑–∞–Ω—è—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å..."
        lsof -ti:8080 | xargs kill -9
        sleep 2
    fi
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    log_info "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    nohup go run main.go > app.log 2>&1 &
    local pid=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if curl -s http://localhost:8080/ > /dev/null; then
        log_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: $pid)"
        echo "–õ–æ–≥–∏: tail -f app.log"
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞: kill $pid"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        cat app.log
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
verify_deployment() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s http://localhost:8080/ > /dev/null; then
            log_success "API –¥–æ—Å—Ç—É–ø–µ–Ω!"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
            log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints..."
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint
            if curl -s http://localhost:8080/ | jq -e '.message' > /dev/null; then
                log_success "‚úì –ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else
                log_warning "‚ö† –ö–æ—Ä–Ω–µ–≤–æ–π endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger
            if curl -s http://localhost:8080/swagger/index.html > /dev/null; then
                log_success "‚úì Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
                log_warning "‚ö† Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            if curl -s http://localhost:8080/api/v1/products > /dev/null; then
                log_success "‚úì API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else
                log_warning "‚ö† API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            fi
            
            break
        fi
        
        log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - API –Ω–µ –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        log_error "API –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞
rollback() {
    log_warning "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞..."
    
    case $ENVIRONMENT in
        dev)
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if [ -f "app.pid" ]; then
                kill $(cat app.pid) 2>/dev/null || true
                rm -f app.pid
            fi
            ;;
        staging|production)
            # –û—Ç–∫–∞—Ç Docker Compose
            if [ -f "$DOCKER_COMPOSE_FILE" ]; then
                docker-compose -f "$DOCKER_COMPOSE_FILE" down
            fi
            ;;
    esac
    
    log_info "–û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
apply_migrations() {
    log_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω
    if ! docker ps | grep -q "products_postgres"; then
        log_error "PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: docker-compose up -d postgres"
        exit 1
    fi
    
    # –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    local migrations=(
        "migrations/001_initial_schema.sql"
        "migrations/002_update_existing_schema.sql"
        "migrations/003_update_users_table.sql"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
    for migration in "${migrations[@]}"; do
        if [ ! -f "$migration" ]; then
            log_warning "–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ $migration –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            continue
        fi
        
        log_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: $migration"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        if docker exec -i products_postgres psql -U postgres -d products_db < "$migration" 2>/dev/null; then
            log_success "‚úì –ú–∏–≥—Ä–∞—Ü–∏—è $migration –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        else
            log_warning "‚ö† –ú–∏–≥—Ä–∞—Ü–∏—è $migration —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
        fi
    done
    
    log_success "–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ë–î
check_database_consistency() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    local tables=("users" "products" "categories" "orders" "cart_items")
    
    for table in "${tables[@]}"; do
        local count=$(docker exec -i products_postgres psql -U postgres -d products_db -t -c "SELECT COUNT(*) FROM $table;" 2>/dev/null | tr -d ' ')
        
        if [ "$count" != "" ] && [ "$count" != "0" ]; then
            log_success "‚úì –¢–∞–±–ª–∏—Ü–∞ $table: $count –∑–∞–ø–∏—Å–µ–π"
        else
            log_warning "‚ö† –¢–∞–±–ª–∏—Ü–∞ $table –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º products -> categories
    local orphan_products=$(docker exec -i products_postgres psql -U postgres -d products_db -t -c "SELECT COUNT(*) FROM products p LEFT JOIN categories c ON p.category_id = c.id WHERE c.id IS NULL;" 2>/dev/null | tr -d ' ')
    
    if [ "$orphan_products" = "0" ] || [ "$orphan_products" = "" ]; then
        log_success "‚úì –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    else
        log_warning "‚ö† –ù–∞–π–¥–µ–Ω–æ $orphan_products –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    fi
    
    log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
main() {
    log_info "–ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    trap 'log_error "–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"; rollback; exit 1' ERR
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    check_config
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    case $ENVIRONMENT in
        dev)
            build_application
            deploy_local
            ;;
        staging|production)
            build_application
            build_docker_image
            deploy_docker_compose
            ;;
    esac
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è staging/production)
    if [ "$ENVIRONMENT" != "dev" ]; then
        apply_migrations
        check_database_consistency
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    verify_deployment
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    echo ""
    log_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
    log_info "–í–µ—Ä—Å–∏—è: $VERSION"
    log_info "API URL: http://localhost:8080"
    log_info "Swagger UI: http://localhost:8080/swagger/index.html"
    
    if [ "$ENVIRONMENT" = "dev" ]; then
        log_info "–õ–æ–≥–∏: tail -f app.log"
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞: pkill -f 'go run main.go'"
    else
        log_info "–õ–æ–≥–∏: docker-compose -f $DOCKER_COMPOSE_FILE logs -f"
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f $DOCKER_COMPOSE_FILE down"
    fi
    
    echo ""
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 