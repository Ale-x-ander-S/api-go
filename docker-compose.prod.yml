version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: products_postgres_prod
    env_file:
      - config.prod.env
    environment:
      POSTGRES_DB: ${DB_NAME:-products_db_prod}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5434:5432"  # Другой порт для production
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - products_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d products_db_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: products_redis_prod
    env_file:
      - config.prod.env
    ports:
      - "6381:6379"  # Другой порт для production
    volumes:
      - redis_data_prod:/data
    networks:
      - products_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # API приложение
  api:
    build: .
    container_name: products_api_prod
    ports:
      - "8082:8080"  # Другой порт для production
    env_file:
      - config.prod.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - products_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx для reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: products_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - products_network_prod
    depends_on:
      - api
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  products_network_prod:
    driver: bridge 