#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –Ω–∞ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-cloud.sh [staging|prod] [server_ip]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -lt 2 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [staging|prod] [server_ip]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 prod 192.168.1.100"
    exit 1
fi

ENVIRONMENT=$1
SERVER_IP=$2
REMOTE_USER=${3:-root}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
case $ENVIRONMENT in
    staging)
        DOCKER_COMPOSE_FILE="docker-compose.staging.yml"
        CONFIG_FILE="config.staging.env"
        ;;
    prod|production)
        DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
        CONFIG_FILE="config.prod.env"
        ;;
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: staging, prod"
        exit 1
        ;;
esac

log_info "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–°–µ—Ä–≤–µ—Ä: $SERVER_IP"
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $REMOTE_USER"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
    log_error "–§–∞–π–ª $DOCKER_COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f "$CONFIG_FILE" ]; then
    log_error "–§–∞–π–ª $CONFIG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$REMOTE_USER@$SERVER_IP" exit 2>/dev/null; then
    log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    log_info "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
    log_info "1. SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    log_info "2. –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
    log_info "3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $REMOTE_USER —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 1
fi
log_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
log_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh "$REMOTE_USER@$SERVER_IP" "mkdir -p ~/api-go"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
log_info "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp "$DOCKER_COMPOSE_FILE" "$REMOTE_USER@$SERVER_IP:~/api-go/"
scp "$CONFIG_FILE" "$REMOTE_USER@$SERVER_IP:~/api-go/"
scp "Dockerfile" "$REMOTE_USER@$SERVER_IP:~/api-go/"
scp "init.sql" "$REMOTE_USER@$SERVER_IP:~/api-go/"
scp -r "nginx" "$REMOTE_USER@$SERVER_IP:~/api-go/" 2>/dev/null || log_warning "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
log_info "–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh "$REMOTE_USER@$SERVER_IP" "cd ~/api-go && \
    docker-compose -f $DOCKER_COMPOSE_FILE down --remove-orphans && \
    docker-compose -f $DOCKER_COMPOSE_FILE build --no-cache && \
    docker-compose -f $DOCKER_COMPOSE_FILE up -d"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "cd ~/api-go && docker-compose -f $DOCKER_COMPOSE_FILE ps"

log_success "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
log_info "üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:8080"
if [ "$ENVIRONMENT" = "prod" ]; then
    log_info "üåê Nginx –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP"
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
log_info "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏? (y/n)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    ssh "$REMOTE_USER@$SERVER_IP" "cd ~/api-go && docker-compose -f $DOCKER_COMPOSE_FILE logs -f"
fi 