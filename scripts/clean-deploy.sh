#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–æ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./clean-deploy.sh [staging|prod] [server_ip] [user]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -lt 2 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [staging|prod] [server_ip] [user]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 prod 45.12.229.112 root"
    exit 1
fi

ENVIRONMENT=$1
SERVER_IP=$2
REMOTE_USER=${3:-root}
REMOTE_DIR="/opt/api-go"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
case $ENVIRONMENT in
    staging)
        DOCKER_COMPOSE_FILE="docker-compose.staging.yml"
        CONFIG_FILE="config.staging.env"
        ;;
    prod|production)
        DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
        CONFIG_FILE="config.prod.env"
        ;;
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: staging, prod"
        exit 1
        ;;
esac

log_info "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–°–µ—Ä–≤–µ—Ä: $SERVER_IP"
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $REMOTE_USER"
log_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $REMOTE_DIR"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
    log_error "–§–∞–π–ª $DOCKER_COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f "$CONFIG_FILE" ]; then
    log_error "–§–∞–π–ª $CONFIG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$REMOTE_USER@$SERVER_IP" exit 2>/dev/null; then
    log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    log_info "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
    log_info "1. SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    log_info "2. –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
    log_info "3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $REMOTE_USER —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 1
fi
log_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    docker-compose -f $DOCKER_COMPOSE_FILE down --remove-orphans --volumes 2>/dev/null || true
    docker-compose down --remove-orphans --volumes 2>/dev/null || true
    docker stop \$(docker ps -aq) 2>/dev/null || true
    docker rm \$(docker ps -aq) 2>/dev/null || true
"

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤
log_info "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    docker rmi \$(docker images -q) 2>/dev/null || true
    docker system prune -af --volumes 2>/dev/null || true
"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
log_info "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $REMOTE_DIR..."
ssh "$REMOTE_USER@$SERVER_IP" "
    sudo rm -rf $REMOTE_DIR
    sudo mkdir -p $REMOTE_DIR
    sudo chown $REMOTE_USER:$REMOTE_USER $REMOTE_DIR
"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
log_info "üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp "$DOCKER_COMPOSE_FILE" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "$CONFIG_FILE" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "Dockerfile" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "init.sql" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "nginx" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
log_info "üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞..."
scp -r "handlers" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "models" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "routes" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "middleware" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "utils" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "config" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "cache" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "database" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "main.go" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "go.mod" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "go.sum" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
log_info "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Go –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh "$REMOTE_USER@$SERVER_IP" "
    if ! command -v go &> /dev/null; then
        echo '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go...'
        wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
        echo 'export PATH=\$PATH:/usr/local/go/bin' >> ~/.bashrc
        export PATH=\$PATH:/usr/local/go/bin
        rm go1.21.0.linux-amd64.tar.gz
    fi
    go version
"

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
log_info "üöÄ –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
ssh "$REMOTE_USER@$SERVER_IP" "cd $REMOTE_DIR && \
    docker-compose -f $DOCKER_COMPOSE_FILE build --no-cache && \
    docker-compose -f $DOCKER_COMPOSE_FILE up -d"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "cd $REMOTE_DIR && docker-compose -f $DOCKER_COMPOSE_FILE ps"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."
if [ "$ENVIRONMENT" = "prod" ]; then
    API_PORT="8082"
else
    API_PORT="8081"
fi

if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/health" > /dev/null; then
    log_success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:$API_PORT"
else
    log_warning "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
fi

log_success "üéâ –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
log_info "üìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose -f $DOCKER_COMPOSE_FILE logs -f'"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
log_info "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏? (y/n)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    ssh "$REMOTE_USER@$SERVER_IP" "cd $REMOTE_DIR && docker-compose -f $DOCKER_COMPOSE_FILE logs -f"
fi 