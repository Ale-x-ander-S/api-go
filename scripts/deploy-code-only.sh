#!/bin/bash

# –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–±–µ–∑ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –∏ —Å–µ—Ä–≤–∏—Å–æ–≤)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-code-only.sh [staging|prod] [server_ip] [user]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -lt 2 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [staging|prod] [server_ip] [user]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 prod 45.12.229.112 root"
    exit 1
fi

ENVIRONMENT=$1
SERVER_IP=$2
REMOTE_USER=${3:-root}
REMOTE_DIR="/opt/api-go"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
case $ENVIRONMENT in
    staging)
        DOCKER_COMPOSE_FILE="docker-compose.staging.yml"
        CONFIG_FILE="config.staging.env"
        ;;
    prod|production)
        DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
        CONFIG_FILE="config.prod.env"
        ;;
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: staging, prod"
        exit 1
        ;;
esac

log_info "‚ö° –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥–∞"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–°–µ—Ä–≤–µ—Ä: $SERVER_IP"
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $REMOTE_USER"
log_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $CONFIG_FILE"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$REMOTE_USER@$SERVER_IP" exit 2>/dev/null; then
    log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    exit 1
fi
log_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
SERVICES_RUNNING=$(ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ jq
    if [ -f \"docker-compose-simple.yml\" ]; then
        docker-compose -f docker-compose-simple.yml ps | grep -c 'Up'
    elif [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
        docker-compose -f $DOCKER_COMPOSE_FILE ps | grep -c 'Up'
    elif [ -f \"docker-compose.yml\" ]; then
        docker-compose ps | grep -c 'Up'
    else
        echo '0'
    fi
" 2>/dev/null || echo "0")

log_info "–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: $SERVICES_RUNNING"

if [ "$SERVICES_RUNNING" -eq "0" ]; then
    log_error "‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π:"
    echo "   make full-deploy ENV=$ENVIRONMENT SERVER=$SERVER_IP USER=$REMOTE_USER"
    exit 1
fi

log_success "‚úÖ –°–µ—Ä–≤–∏—Å—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ docker-compose —Ñ–∞–π–ª–∞
get_active_compose_file() {
    ssh "$REMOTE_USER@$SERVER_IP" "
        cd $REMOTE_DIR 2>/dev/null || exit 0
        
        if [ -f \"docker-compose-simple.yml\" ]; then
            echo 'docker-compose-simple.yml'
        elif [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
            echo '$DOCKER_COMPOSE_FILE'
        elif [ -f \"docker-compose.yml\" ]; then
            echo 'docker-compose.yml'
        else
            echo ''
        fi
    "
}

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π docker-compose —Ñ–∞–π–ª
ACTIVE_COMPOSE_FILE=$(get_active_compose_file)

if [ -z "$ACTIVE_COMPOSE_FILE" ]; then
    log_error "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω docker-compose —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
    exit 1
fi

log_info "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è docker-compose —Ñ–∞–π–ª: $ACTIVE_COMPOSE_FILE"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
log_info "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh "$REMOTE_USER@$SERVER_IP" "mkdir -p $REMOTE_DIR"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–¥–∞
log_info "üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp "main.go" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "go.mod" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "go.sum" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "handlers" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "models" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "routes" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "middleware" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "utils" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "config" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "cache" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "database" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
log_success "–§–∞–π–ª—ã –∫–æ–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
log_info "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ API
    docker-compose -f $ACTIVE_COMPOSE_FILE stop api
    docker-compose -f $ACTIVE_COMPOSE_FILE rm -f api
    
    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ API
    docker-compose -f $ACTIVE_COMPOSE_FILE up -d --build api
"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API
log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    echo '=== –°—Ç–∞—Ç—É—Å API ==='
    docker-compose -f $ACTIVE_COMPOSE_FILE ps api
    
    echo ''
    echo '=== –¢–µ—Å—Ç API ==='
    docker exec \$(docker-compose -f $ACTIVE_COMPOSE_FILE ps -q api) wget --no-verbose --tries=1 --spider http://localhost:8080/ 2>/dev/null && echo 'API –æ—Ç–≤–µ—á–∞–µ—Ç' || echo 'API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ API
log_info "üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ API..."
log_info "–ê–∫—Ç–∏–≤–Ω—ã–π docker-compose —Ñ–∞–π–ª: $ACTIVE_COMPOSE_FILE"

# –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ docker-compose ps –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
log_info "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ docker-compose ps:"
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    echo '=== –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ docker-compose ps ==='
    docker-compose -f $ACTIVE_COMPOSE_FILE ps
    echo ''
    echo '=== –°—Ç—Ä–æ–∫–∞ —Å API ==='
    docker-compose -f $ACTIVE_COMPOSE_FILE ps | grep api
"

API_PORT=$(ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    if [ -f \"$ACTIVE_COMPOSE_FILE\" ]; then
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ docker-compose ps
        docker-compose -f $ACTIVE_COMPOSE_FILE ps | grep api | awk '{print \$6}' | sed 's/.*://' | cut -d'-' -f1
    else
        echo ''
    fi
")

log_info "–°—ã—Ä–æ–π –≤—ã–≤–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Ä—Ç–∞: '$API_PORT'"

# –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
if [ -z "$API_PORT" ] || [ "$API_PORT" = "seconds" ] || [ "$API_PORT" = "Up" ] || [ "$API_PORT" = "running" ]; then
    log_warning "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    case $ENVIRONMENT in
        staging) API_PORT="8081" ;;
        prod|production) API_PORT="8080" ;;
        *) API_PORT="8080" ;;
    esac
fi

log_info "–ò—Ç–æ–≥–æ–≤—ã–π API –ø–æ—Ä—Ç: $API_PORT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."
if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/" > /dev/null; then
    log_success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:$API_PORT"
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    log_info "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
    
    # –¢–µ—Å—Ç Swagger
    if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/swagger/index.html" > /dev/null; then
        log_success "‚úÖ Swagger –¥–æ—Å—Ç—É–ø–µ–Ω: http://$SERVER_IP:$API_PORT/swagger/index.html"
    else
        log_warning "‚ö†Ô∏è  Swagger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/api/v1/products" > /dev/null; then
        log_success "‚úÖ API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "‚ö†Ô∏è  API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
else
    log_warning "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

log_success "üéâ –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ API
log_info "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ API? (y/n)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    ssh "$REMOTE_USER@$SERVER_IP" "
        cd $REMOTE_DIR
        docker-compose -f $ACTIVE_COMPOSE_FILE logs -f api
    "
fi

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
echo ""
log_info "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç:"
echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose -f $ACTIVE_COMPOSE_FILE ps api'"
echo ""
echo "2. API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:$API_PORT"
echo "3. Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://$SERVER_IP:$API_PORT/swagger/index.html"
echo ""
echo "4. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   curl http://$SERVER_IP:$API_PORT/api/v1/products"
echo ""
echo "5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API:"
echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose -f $ACTIVE_COMPOSE_FILE logs -f api'"
echo ""
echo "6. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   make full-deploy ENV=$ENVIRONMENT SERVER=$SERVER_IP USER=$REMOTE_USER" 