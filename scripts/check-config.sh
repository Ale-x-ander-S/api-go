#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ env —Ñ–∞–π–ª—ã –∏ docker-compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞..."
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ env —Ñ–∞–π–ª–æ–≤
check_env_file() {
    local file=$1
    local env_name=$2
    
    if [ -f "$file" ]; then
        log_success "‚úÖ $env_name: $file"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        local missing_vars=()
        
        while IFS= read -r line; do
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if [[ $line =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
                continue
            fi
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            var_name=$(echo "$line" | cut -d'=' -f1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –ø—É—Å—Ç–∞—è
            if [[ $line =~ ^[[:space:]]*[A-Z_]+=[[:space:]]*$ ]]; then
                missing_vars+=("$var_name")
            fi
        done < "$file"
        
        if [ ${#missing_vars[@]} -ne 0 ]; then
            log_warning "‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ $env_name:"
            printf '   %s\n' "${missing_vars[@]}"
        fi
        
    else
        log_error "‚ùå $env_name: $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose —Ñ–∞–π–ª–æ–≤
check_docker_compose() {
    local file=$1
    local env_name=$2
    
    if [ -f "$file" ]; then
        log_success "‚úÖ $env_name: $file"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        if docker-compose -f "$file" config > /dev/null 2>&1; then
            log_success "   –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
        else
            log_error "   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"
        fi
        
    else
        log_error "‚ùå $env_name: $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ env —Ñ–∞–π–ª—ã
log_info "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
check_env_file "config.dev.env" "Development"
check_env_file "config.staging.env" "Staging"
check_env_file "config.prod.env" "Production"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose —Ñ–∞–π–ª—ã
log_info "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose —Ñ–∞–π–ª–æ–≤:"
check_docker_compose "docker-compose.yml" "Development"
check_docker_compose "docker-compose.staging.yml" "Staging"
check_docker_compose "docker-compose.prod.yml" "Production"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
log_info "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
ports_dev=$(grep -o '"[0-9]\+:[0-9]\+"' docker-compose.yml | head -1 | tr -d '"' | cut -d':' -f1 2>/dev/null || echo "8080")
ports_staging=$(grep -o '"[0-9]\+:[0-9]\+"' docker-compose.staging.yml | head -1 | tr -d '"' | cut -d':' -f1 2>/dev/null || echo "8081")
ports_prod=$(grep -o '"[0-9]\+:[0-9]\+"' docker-compose.prod.yml | head -1 | tr -d '"' | cut -d':' -f1 2>/dev/null || echo "8082")

echo "   Development: –ø–æ—Ä—Ç $ports_dev"
echo "   Staging: –ø–æ—Ä—Ç $ports_staging"
echo "   Production: –ø–æ—Ä—Ç $ports_prod"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Ä—Ç–æ–≤
if [ "$ports_dev" = "$ports_staging" ] || [ "$ports_dev" = "$ports_prod" ] || [ "$ports_staging" = "$ports_prod" ]; then
    log_warning "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Ä—Ç–æ–≤!"
fi
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
log_info "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
if [ -f "config.prod.env" ]; then
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Å–µ–∫—Ä–µ—Ç–∞
    jwt_secret=$(grep "^JWT_SECRET=" config.prod.env | cut -d'=' -f2)
    if [ ${#jwt_secret} -lt 30 ]; then
        log_warning "‚ö†Ô∏è  JWT_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${#jwt_secret} —Å–∏–º–≤–æ–ª–æ–≤)"
    else
        log_success "‚úÖ JWT_SECRET –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π
    db_password=$(grep "^DB_PASSWORD=" config.prod.env | cut -d'=' -f2)
    if [ "$db_password" = "CHANGE_THIS_PASSWORD_IN_PRODUCTION" ]; then
        log_warning "‚ö†Ô∏è  DB_PASSWORD –Ω–µ –∏–∑–º–µ–Ω–µ–Ω —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
    else
        log_success "‚úÖ DB_PASSWORD –∏–∑–º–µ–Ω–µ–Ω"
    fi
    
    redis_password=$(grep "^REDIS_PASSWORD=" config.prod.env | cut -d'=' -f2)
    if [ "$redis_password" = "CHANGE_THIS_REDIS_PASSWORD" ]; then
        log_warning "‚ö†Ô∏è  REDIS_PASSWORD –Ω–µ –∏–∑–º–µ–Ω–µ–Ω —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
    else
        log_success "‚úÖ REDIS_PASSWORD –∏–∑–º–µ–Ω–µ–Ω"
    fi
else
    log_warning "‚ö†Ô∏è  config.prod.env –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
fi
echo ""

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
log_info "üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:"
if [ -f "config.dev.env" ] && [ -f "config.staging.env" ] && [ -f "config.prod.env" ]; then
    log_success "‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
else
    log_warning "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
fi

if [ -f "docker-compose.yml" ] && [ -f "docker-compose.staging.yml" ] && [ -f "docker-compose.prod.yml" ]; then
    log_success "‚úÖ –í—Å–µ Docker Compose —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
else
    log_warning "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ Docker Compose —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
fi

echo ""
log_info "üöÄ –î–ª—è –¥–µ–ø–ª–æ—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   –õ–æ–∫–∞–ª—å–Ω–æ: make deploy-local"
echo "   Staging: make deploy-cloud ENV=staging SERVER=YOUR_IP"
echo "   Production: make deploy-cloud ENV=prod SERVER=YOUR_IP"
echo ""
log_info "üîê –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
echo "   make generate-prod-config" 