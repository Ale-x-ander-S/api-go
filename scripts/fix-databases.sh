#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./fix-databases.sh [staging|prod] [server_ip] [user]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -lt 2 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [staging|prod] [server_ip] [user]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 prod 45.12.229.112 root"
    exit 1
fi

ENVIRONMENT=$1
SERVER_IP=$2
REMOTE_USER=${3:-root}
REMOTE_DIR="/opt/api-go"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
case $ENVIRONMENT in
    staging)
        DOCKER_COMPOSE_FILE="docker-compose.staging.yml"
        CONFIG_FILE="config.staging.env"
        ;;
    prod|production)
        DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
        CONFIG_FILE="config.prod.env"
        ;;
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: staging, prod"
        exit 1
        ;;
esac

log_info "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–°–µ—Ä–≤–µ—Ä: $SERVER_IP"
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $REMOTE_USER"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$REMOTE_USER@$SERVER_IP" exit 2>/dev/null; then
    log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    exit 1
fi
log_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
log_info "üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    echo '=== –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å ==='
    docker-compose -f $DOCKER_COMPOSE_FILE ps
    
    echo ''
    echo '=== Docker info ==='
    docker info 2>/dev/null | head -20 || echo 'Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    
    echo ''
    echo '=== –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ==='
    df -h
    
    echo ''
    echo '=== –ü–∞–º—è—Ç—å ==='
    free -h
    
    echo ''
    echo '=== –°–µ—Ç–µ–≤—ã–µ –ø–æ—Ä—Ç—ã ==='
    netstat -tlnp | grep -E '(543|637|808)' || echo '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤'
"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    docker-compose -f $DOCKER_COMPOSE_FILE down --remove-orphans --volumes
"

# –û—á–∏—Å—Ç–∫–∞ Docker
log_info "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
ssh "$REMOTE_USER@$SERVER_IP" "
    docker system prune -af --volumes
    docker volume prune -f
    docker network prune -f
"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤
log_info "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
ssh "$REMOTE_USER@$SERVER_IP" "
    if [ -d $REMOTE_DIR ]; then
        echo '–ü—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:'
        ls -la $REMOTE_DIR/
        echo ''
        echo '–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
        whoami && id
        echo ''
        echo '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤...'
        sudo chown -R $REMOTE_USER:$REMOTE_USER $REMOTE_DIR/
        sudo chmod -R 755 $REMOTE_DIR/
    fi
"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    docker-compose -f $DOCKER_COMPOSE_FILE up -d
"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 60

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    echo '=== –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ==='
    docker-compose -f $DOCKER_COMPOSE_FILE ps
    
    echo ''
    echo '=== Health checks ==='
    echo 'PostgreSQL:'
    docker inspect \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q postgres) | grep -A 5 Health || echo 'Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    echo ''
    echo 'Redis:'
    docker inspect \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q redis) | grep -A 5 Health || echo 'Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    echo ''
    echo 'API:'
    docker inspect \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q api) | grep -A 5 Health || echo 'Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
log_info "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    echo '=== –¢–µ—Å—Ç PostgreSQL ==='
    if docker-compose -f $DOCKER_COMPOSE_FILE ps postgres | grep -q 'Up'; then
        docker exec \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q postgres) pg_isready -U postgres || echo 'PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤'
    else
        echo 'PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω'
    fi
    
    echo ''
    echo '=== –¢–µ—Å—Ç Redis ==='
    if docker-compose -f $DOCKER_COMPOSE_FILE ps redis | grep -q 'Up'; then
        docker exec \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q redis) redis-cli -a \$(grep REDIS_PASSWORD $CONFIG_FILE | cut -d'=' -f2) ping || echo 'Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
    else
        echo 'Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω'
    fi
    
    echo ''
    echo '=== –¢–µ—Å—Ç API ==='
    if docker-compose -f $DOCKER_COMPOSE_FILE ps api | grep -q 'Up'; then
        docker exec \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q api) wget --no-verbose --tries=1 --spider http://localhost:8080/health || echo 'API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
    else
        echo 'API –Ω–µ –∑–∞–ø—É—â–µ–Ω'
    fi
"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."
if [ "$ENVIRONMENT" = "prod" ]; then
    API_PORT="8082"
else
    API_PORT="8081"
fi

if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/health" > /dev/null; then
    log_success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:$API_PORT"
else
    log_warning "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

log_success "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
log_info "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤? (y/n)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    ssh "$REMOTE_USER@$SERVER_IP" "cd $REMOTE_DIR && docker-compose -f $DOCKER_COMPOSE_FILE logs -f"
fi 