#!/bin/bash

# CI/CD —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/ci-cd.sh [dev|staging|prod] [branch]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[CI/CD]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
ENVIRONMENT=${1:-dev}
BRANCH=${2:-main}
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BUILD_ID="${ENVIRONMENT}-${BRANCH}-${TIMESTAMP}"

log_info "üöÄ CI/CD —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Products API"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–í–µ—Ç–∫–∞: $BRANCH"
log_info "Build ID: $BUILD_ID"
echo ""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Git —Å—Ç–∞—Ç—É—Å–∞
check_git_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞..."
    
    if [ ! -d ".git" ]; then
        log_error "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if [ -n "$(git status --porcelain)" ]; then
        log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        git status --porcelain
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            exit 0
        fi
    fi
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É
    if [ "$(git branch --show-current)" != "$BRANCH" ]; then
        log_info "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É $BRANCH..."
        git checkout "$BRANCH"
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ç–∫—É
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏..."
    git pull origin "$BRANCH"
    
    log_success "Git —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    if ! make test; then
        log_error "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
        exit 1
    fi
    
    log_success "–¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
check_code_quality() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–º
    if ! make lint; then
        log_warning "–õ–∏–Ω—Ç–µ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            exit 0
        fi
    fi
    
    log_success "–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞ –≤–µ—Ä—Å–∏–∏
create_version_tag() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –≤–µ—Ä—Å–∏–∏..."
    
    local version_tag="v${ENVIRONMENT}-${TIMESTAMP}"
    
    if git tag "$version_tag"; then
        git push origin "$version_tag"
        log_success "–¢–µ–≥ —Å–æ–∑–¥–∞–Ω: $version_tag"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
deploy() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    if ./deploy.sh "$ENVIRONMENT"; then
        log_success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
notify_deployment() {
    log_info "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏..."
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Slack, Teams, Email –∏ —Ç.–¥.
    echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
    echo "–í–µ—Ç–∫–∞: $BRANCH"
    echo "Build ID: $BUILD_ID"
    echo "–í—Ä–µ–º—è: $(date)"
    echo "API URL: http://localhost:8080"
    
    log_success "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏
    make clean
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏
    rm -f app.log
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ CI/CD
main() {
    log_info "–ù–∞—á–∞–ª–æ CI/CD –ø—Ä–æ—Ü–µ—Å—Å–∞..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    trap 'log_error "CI/CD –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω"; exit 1' ERR
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤
    check_git_status
    run_tests
    check_code_quality
    create_version_tag
    deploy
    notify_deployment
    cleanup
    
    log_success "üéâ CI/CD –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    log_info "–†–µ–∑—É–ª—å—Ç–∞—Ç:"
    log_info "- –û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
    log_info "- –í–µ—Ä—Å–∏—è: $BUILD_ID"
    log_info "- API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080"
    log_info "- Swagger UI: http://localhost:8080/swagger/index.html"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
main "$@" 