#!/bin/bash

# –î–µ–ø–ª–æ–π –Ω–∞ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–∫–∞–∫ make deploy-local)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-cloud-local.sh [staging|prod] [server_ip] [user]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -lt 2 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [staging|prod] [server_ip] [user]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 prod 45.12.229.112 root"
    exit 1
fi

ENVIRONMENT=$1
SERVER_IP=$2
REMOTE_USER=${3:-root}
REMOTE_DIR="/opt/api-go"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
case $ENVIRONMENT in
    staging)
        DOCKER_COMPOSE_FILE="docker-compose.staging.yml"
        CONFIG_FILE="config.staging.env"
        ;;
    prod|production)
        DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
        CONFIG_FILE="config.prod.env"
        ;;
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: staging, prod"
        exit 1
        ;;
esac

log_info "‚òÅÔ∏è  –î–µ–ø–ª–æ–π –Ω–∞ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–°–µ—Ä–≤–µ—Ä: $SERVER_IP"
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $REMOTE_USER"
log_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $CONFIG_FILE"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$REMOTE_USER@$SERVER_IP" exit 2>/dev/null; then
    log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    exit 1
fi
log_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
log_info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh "$REMOTE_USER@$SERVER_IP" "mkdir -p $REMOTE_DIR"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
log_info "üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp -r . "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || {
    log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç—è–º..."
    scp -r "migrations" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp "Dockerfile" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp "init.sql" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp "main.go" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp "go.mod" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp "go.sum" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "handlers" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "models" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "routes" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "middleware" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "utils" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "config" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "cache" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp -r "database" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp "docker-compose.yml" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    scp "$CONFIG_FILE" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
}
log_success "–§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    docker-compose down --remove-orphans --volumes 2>/dev/null || true
    docker-compose -f $DOCKER_COMPOSE_FILE down --remove-orphans --volumes 2>/dev/null || true
"

# –û—á–∏—Å—Ç–∫–∞ Docker
log_info "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
ssh "$REMOTE_USER@$SERVER_IP" "
    docker system prune -af 2>/dev/null || true
    docker network prune -f 2>/dev/null || true
"

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose (–∫–∞–∫ –≤ make deploy-local)
log_info "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ docker-compose..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π docker-compose —Ñ–∞–π–ª
    if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
        echo '–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ $DOCKER_COMPOSE_FILE...'
        docker-compose -f $DOCKER_COMPOSE_FILE up -d
    else
        echo '–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π docker-compose.yml...'
        docker-compose up -d
    fi
"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 60

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
log_info "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
apply_remote_migrations

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    echo '=== –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ==='
    if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
        docker-compose -f $DOCKER_COMPOSE_FILE ps
    else
        docker-compose ps
    fi
    
    echo ''
    echo '=== –¢–µ—Å—Ç PostgreSQL ==='
    if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
        docker exec \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q postgres) pg_isready -U postgres 2>/dev/null && echo 'PostgreSQL –≥–æ—Ç–æ–≤' || echo 'PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤'
    else
        docker exec \$(docker-compose ps -q postgres) pg_isready -U postgres 2>/dev/null && echo 'PostgreSQL –≥–æ—Ç–æ–≤' || echo 'PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤'
    fi
    
    echo ''
    echo '=== –¢–µ—Å—Ç Redis ==='
    if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
        docker exec \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q redis) redis-cli ping 2>/dev/null && echo 'Redis –æ—Ç–≤–µ—á–∞–µ—Ç' || echo 'Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
    else
        docker exec \$(docker-compose ps -q redis) redis-cli ping 2>/dev/null && echo 'Redis –æ—Ç–≤–µ—á–∞–µ—Ç' || echo 'Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
    fi
    
    echo ''
    echo '=== –¢–µ—Å—Ç API ==='
    if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
        docker exec \$(docker-compose -f $DOCKER_COMPOSE_FILE ps -q api) wget --no-verbose --tries=1 --spider http://localhost:8080/ 2>/dev/null && echo 'API –æ—Ç–≤–µ—á–∞–µ—Ç' || echo 'API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
    else
        docker exec \$(docker-compose ps -q api) wget --no-verbose --tries=1 --spider http://localhost:8080/ 2>/dev/null && echo 'API –æ—Ç–≤–µ—á–∞–µ—Ç' || echo 'API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
    fi
"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ API
log_info "üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ API..."
API_PORT=$(ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
        docker-compose -f $DOCKER_COMPOSE_FILE ps | grep api | awk '{print \$6}' | cut -d':' -f2 | cut -d'-' -f1
    else
        docker-compose ps | grep api | awk '{print \$6}' | cut -d':' -f2 | cut -d'-' -f1
    fi
")

if [ -z "$API_PORT" ]; then
    # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    case $ENVIRONMENT in
        staging) API_PORT="8081" ;;
        prod|production) API_PORT="8080" ;;
        *) API_PORT="8080" ;;
    esac
fi

log_info "API –ø–æ—Ä—Ç: $API_PORT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."
if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/" > /dev/null; then
    log_success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:$API_PORT"
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    log_info "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
    
    # –¢–µ—Å—Ç Swagger
    if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/swagger/index.html" > /dev/null; then
        log_success "‚úÖ Swagger –¥–æ—Å—Ç—É–ø–µ–Ω: http://$SERVER_IP:$API_PORT/swagger/index.html"
    else
        log_warning "‚ö†Ô∏è  Swagger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/api/v1/products" > /dev/null; then
        log_success "‚úÖ API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "‚ö†Ô∏è  API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
else
    log_warning "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

log_success "üéâ –î–µ–ø–ª–æ–π –Ω–∞ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
log_info "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤? (y/n)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    ssh "$REMOTE_USER@$SERVER_IP" "
        cd $REMOTE_DIR
        if [ -f \"$DOCKER_COMPOSE_FILE\" ]; then
            docker-compose -f $DOCKER_COMPOSE_FILE logs -f
        else
            docker-compose logs -f
        fi
    "
fi

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
echo ""
log_info "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç:"
if [ -f "$DOCKER_COMPOSE_FILE" ]; then
    echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose -f $DOCKER_COMPOSE_FILE ps'"
else
    echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose ps'"
fi
echo ""
echo "2. API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:$API_PORT"
echo "3. Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://$SERVER_IP:$API_PORT/swagger/index.html"
echo ""
echo "4. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   curl http://$SERVER_IP:$API_PORT/api/v1/products"
echo ""
echo "5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:"
if [ -f "$DOCKER_COMPOSE_FILE" ]; then
    echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose -f $DOCKER_COMPOSE_FILE logs -f'"
else
    echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose logs -f'"
fi

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
apply_remote_migrations() {
    log_info "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    scp "scripts/remote-migrations.sh" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    ssh "$REMOTE_USER@$SERVER_IP" "
        cd $REMOTE_DIR 2>/dev/null || exit 0
        chmod +x remote-migrations.sh
        ./remote-migrations.sh
    "
    
    log_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
} 