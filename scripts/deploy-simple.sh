#!/bin/bash

# –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –±–µ–∑ healthcheck
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-simple.sh [staging|prod] [server_ip] [user]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -lt 2 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [staging|prod] [server_ip] [user]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 prod 45.12.229.112 root"
    exit 1
fi

ENVIRONMENT=$1
SERVER_IP=$2
REMOTE_USER=${3:-root}
REMOTE_DIR="/opt/api-go"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
case $ENVIRONMENT in
    staging)
        DOCKER_COMPOSE_FILE="docker-compose.staging.yml"
        ;;
    prod|production)
        DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
        ;;
    *)
        log_error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: staging, prod"
        exit 1
        ;;
esac

log_info "üöÄ –ü—Ä–æ—Å—Ç–æ–π –¥–µ–ø–ª–æ–π –±–µ–∑ healthcheck"
log_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $ENVIRONMENT"
log_info "–°–µ—Ä–≤–µ—Ä: $SERVER_IP"
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $REMOTE_USER"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$REMOTE_USER@$SERVER_IP" exit 2>/dev/null; then
    log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    exit 1
fi
log_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
log_info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh "$REMOTE_USER@$SERVER_IP" "mkdir -p $REMOTE_DIR"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
log_info "üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp -r "migrations" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp "Dockerfile" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "init.sql" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "main.go" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "go.mod" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp "go.sum" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
scp -r "handlers" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ handlers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp -r "models" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp -r "routes" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ routes –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp -r "middleware" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ middleware –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp -r "utils" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ utils –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp -r "config" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ config –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp -r "cache" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ cache –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
scp -r "database" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/" 2>/dev/null || log_warning "–ü–∞–ø–∫–∞ database –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
log_success "–§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    docker-compose -f $DOCKER_COMPOSE_FILE down --remove-orphans --volumes 2>/dev/null || true
"

# –û—á–∏—Å—Ç–∫–∞ Docker
log_info "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
ssh "$REMOTE_USER@$SERVER_IP" "
    docker system prune -af --volumes 2>/dev/null || true
    docker volume prune -f 2>/dev/null || true
    docker network prune -f 2>/dev/null || true
"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ docker-compose –±–µ–∑ healthcheck
log_info "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ healthcheck..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –±–µ–∑ healthcheck
    cat > docker-compose-simple.yml << 'EOF'
services:
  # PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:15-alpine
    container_name: products_postgres_prod
    environment:
      POSTGRES_DB: products_db_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Mo5dos!sod5oM
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - '5434:5432'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - products_network_prod
    restart: unless-stopped

  # Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  redis:
    image: redis:7-alpine
    container_name: products_redis_prod
    ports:
      - '6381:6379'
    volumes:
      - redis_data_prod:/data
    networks:
      - products_network_prod
    command: redis-server --appendonly yes --requirepass Mo5dos!sod5oM
    restart: unless-stopped

  # API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  api:
    build: .
    container_name: products_api_prod
    ports:
      - '8082:8080'
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: Mo5dos!sod5oM
      DB_NAME: products_db_prod
      DB_SSL_MODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: Mo5dos!sod5oM
      JWT_SECRET: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJwcm9kdWN0cy1hcGkiLCJpc3MiOiJhcGktZ28iLCJhdWQiOiJwcm9kdWN0cy1jbGllbnQiLCJpYXQiOjE3MzQ1NjgwMDAsIm5iZiI6MTczNDU2ODAwMCwiZXhwIjoyMTAwMDAwMDAwfQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8
      ENVIRONMENT: production
      LOG_LEVEL: debug
      PORT: 8080
    depends_on:
      - postgres
      - redis
    networks:
      - products_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  products_network_prod:
    driver: bridge
EOF
"

# –ó–∞–ø—É—Å–∫ –±–µ–∑ healthcheck
log_info "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ healthcheck..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    docker-compose -f docker-compose-simple.yml up -d
"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 60

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
if [ "$ENVIRONMENT" = "prod" ] || [ "$ENVIRONMENT" = "production" ]; then
    log_info "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è production..."
    apply_remote_migrations
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ë–î
    check_remote_database_consistency
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh "$REMOTE_USER@$SERVER_IP" "
    cd $REMOTE_DIR 2>/dev/null || exit 0
    
    echo '=== –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ==='
    docker-compose -f docker-compose-simple.yml ps
    
    echo ''
    echo '=== –¢–µ—Å—Ç PostgreSQL ==='
    docker exec \$(docker-compose -f docker-compose-simple.yml ps -q postgres) pg_isready -U postgres -d products_db_prod 2>/dev/null && echo 'PostgreSQL –≥–æ—Ç–æ–≤' || echo 'PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤'
    
    echo ''
    echo '=== –¢–µ—Å—Ç Redis ==='
    docker exec \$(docker-compose -f docker-compose-simple.yml ps -q redis) redis-cli ping 2>/dev/null && echo 'Redis –æ—Ç–≤–µ—á–∞–µ—Ç' || echo 'Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
    
    echo ''
    echo '=== –¢–µ—Å—Ç API ==='
    docker exec \$(docker-compose -f docker-compose-simple.yml ps -q api) wget --no-verbose --tries=1 --spider http://localhost:8080/health 2>/dev/null && echo 'API –æ—Ç–≤–µ—á–∞–µ—Ç' || echo 'API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."
if [ "$ENVIRONMENT" = "prod" ]; then
    API_PORT="8082"
else
    API_PORT="8081"
fi

if curl -s --connect-timeout 10 "http://$SERVER_IP:$API_PORT/health" > /dev/null; then
    log_success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$SERVER_IP:$API_PORT"
else
    log_warning "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

log_success "üéâ –ü—Ä–æ—Å—Ç–æ–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
log_info "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤? (y/n)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    ssh "$REMOTE_USER@$SERVER_IP" "cd $REMOTE_DIR && docker-compose -f docker-compose-simple.yml logs -f"
fi

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
echo ""
log_info "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç:"
echo "   ssh $REMOTE_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose -f docker-compose-simple.yml ps'"
echo ""
echo "2. –ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å healthcheck:"
echo "   - –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ healthcheck –≤ $DOCKER_COMPOSE_FILE"
echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∞–π–ª–æ–º"
echo ""
echo "3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è production:"
echo "   docker-compose -f docker-compose-simple.yml up -d" 

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
apply_remote_migrations() {
    log_info "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    scp "scripts/remote-migrations.sh" "$REMOTE_USER@$SERVER_IP:$REMOTE_DIR/"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    ssh "$REMOTE_USER@$SERVER_IP" "
        cd $REMOTE_DIR 2>/dev/null || exit 0
        chmod +x remote-migrations.sh
        ./remote-migrations.sh
    "
    
    log_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ë–î –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
check_remote_database_consistency() {
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ë–î –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ..."
    
    ssh "$REMOTE_USER@$SERVER_IP" "
        cd $REMOTE_DIR 2>/dev/null || exit 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        echo '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ë–î ==='
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
        docker exec \$(docker-compose -f docker-compose-simple.yml ps -q postgres) psql -U postgres -d products_db_prod -c \"
            SELECT 
                COUNT(*) as total_migrations,
                COUNT(CASE WHEN applied_at IS NOT NULL THEN 1 END) as applied_migrations
            FROM schema_migrations;
        \" 2>/dev/null || echo '–¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        docker exec \$(docker-compose -f docker-compose-simple.yml ps -q postgres) psql -U postgres -d products_db_prod -c \"
            SELECT 
                'users' as table_name, COUNT(*) as record_count FROM users
            UNION ALL
            SELECT 
                'products' as table_name, COUNT(*) as record_count FROM products
            UNION ALL
            SELECT 
                'categories' as table_name, COUNT(*) as record_count FROM categories
            UNION ALL
            SELECT 
                'orders' as table_name, COUNT(*) as record_count FROM orders;
        \" 2>/dev/null || echo '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü'
        
        echo ''
    "
    
    log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
} 