.PHONY: help build run test clean swagger deps

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BINARY_NAME=api-go
MAIN_FILE=main.go

# –ü–æ–º–æ—â—å
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
deps: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Go
	go mod download
	go mod tidy

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
swagger: ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
	swag init -g $(MAIN_FILE)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Swagger (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
swagger-auto: ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Swagger —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
	@echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
	@if command -v swag &> /dev/null; then \
		swag init -g $(MAIN_FILE) && echo "‚úÖ Swagger –æ–±–Ω–æ–≤–ª–µ–Ω"; \
	else \
		echo "‚ö†Ô∏è  swag –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ GOPATH..."; \
		GOPATH=$${GOPATH:-$$HOME/go}; \
		if [ -f "$$GOPATH/bin/swag" ]; then \
			$$GOPATH/bin/swag init -g $(MAIN_FILE) && echo "‚úÖ Swagger –æ–±–Ω–æ–≤–ª–µ–Ω"; \
		else \
			echo "‚ùå swag –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: make tools"; \
		fi; \
	fi

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build: ## –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	go build -o $(BINARY_NAME) $(MAIN_FILE)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	go run $(MAIN_FILE)

# –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π Swagger
run-auto: swagger-auto run ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º Swagger

# –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
	@echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ air –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏..."
	@if ! command -v air &> /dev/null; then \
		go install github.com/cosmtrek/air@latest; \
	fi
	air

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	go test -v ./...

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	@if ! command -v golangci-lint &> /dev/null; then \
		echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ golangci-lint..."; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
	fi
	golangci-lint run

# –û—á–∏—Å—Ç–∫–∞
clean: ## –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	go clean
	rm -f $(BINARY_NAME)
	rm -rf docs/

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
tools: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	go install github.com/swaggo/swag/cmd/swag@latest
	go install github.com/cosmtrek/air@latest
	@if ! command -v golangci-lint &> /dev/null; then \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
	fi

# –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup: tools deps swagger ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É
check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	@go mod verify
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞..."
	@go build -o /dev/null $(MAIN_FILE)
	@echo "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"

# –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
start: check run ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

# –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º Swagger
start-auto: check swagger-auto run ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º Swagger

# Docker –∫–æ–º–∞–Ω–¥—ã
docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker build -t $(BINARY_NAME) .

docker-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
	docker run -p 8080:8080 --env-file config.env $(BINARY_NAME)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db-create: ## –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç psql)
	@echo "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö products_db..."
	@psql -U postgres -c "CREATE DATABASE products_db;" || echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"

db-drop: ## –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç psql)
	@echo "–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö products_db..."
	@psql -U postgres -c "DROP DATABASE IF EXISTS products_db;"

# Redis –∫–æ–º–∞–Ω–¥—ã
redis-start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Redis –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "–ó–∞–ø—É—Å–∫ Redis..."
	@if ! docker ps | grep -q redis; then \
		docker run -d --name redis-cache -p 6379:6379 redis:7-alpine; \
		echo "Redis –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 6379"; \
	else \
		echo "Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω"; \
	fi

redis-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Redis
	@echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis..."
	@docker stop redis-cache 2>/dev/null || echo "Redis –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
	@docker rm redis-cache 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Redis –Ω–µ –Ω–∞–π–¥–µ–Ω"

redis-cli: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis CLI
	@echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis CLI..."
	@docker exec -it redis-cache redis-cli

redis-flush: ## –û—á–∏—Å—Ç–∏—Ç—å Redis
	@echo "–û—á–∏—Å—Ç–∫–∞ Redis..."
	@docker exec redis-cache redis-cli FLUSHALL

# Docker Compose
docker-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ Docker Compose
	docker-compose up -d

docker-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	docker-compose down

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose logs -f

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker)
	docker logs -f $(BINARY_NAME) || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
	@curl -s http://localhost:8080/ | jq . || echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"

cache-stats: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
	@echo "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞..."
	@echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: curl -H 'Authorization: Bearer YOUR_TOKEN' http://localhost:8080/api/v1/cache/stats"

# Swagger –∫–æ–º–∞–Ω–¥—ã
swagger-serve: swagger ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å Swagger UI
	@echo "üåê –û—Ç–∫—Ä—ã—Ç–∏–µ Swagger UI..."
	@if command -v open &> /dev/null; then \
		open http://localhost:8080/swagger/index.html; \
	elif command -v xdg-open &> /dev/null; then \
		xdg-open http://localhost:8080/swagger/index.html; \
	else \
		echo "–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:8080/swagger/index.html"; \
	fi

swagger-watch: ## –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å Swagger
	@echo "üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ..."
	@if command -v fswatch &> /dev/null; then \
		fswatch -o . | xargs -n1 -I {} make swagger; \
	else \
		echo "fswatch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install fswatch (macOS) –∏–ª–∏ apt-get install fswatch (Ubuntu)"; \
	fi

# JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
get-token: ## –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
	@echo "üîë –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞..."
	@./scripts/get-token.sh

# –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∞
get-admin-token: ## –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	@echo "üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
	@curl -s -X POST http://localhost:8080/api/v1/auth/login \
		-H "Content-Type: application/json" \
		-d '{"username":"admin","password":"password"}' | \
		jq -r '.token' | \
		sed 's/^/Bearer /' 